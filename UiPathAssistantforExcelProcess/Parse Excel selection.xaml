<Activity mc:Ignorable="sap sap2010" x:Class="Parse_Excel_selection" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="selection" Type="InArgument(x:String)" />
    <x:Property Name="sheet" Type="OutArgument(x:String)" />
    <x:Property Name="range" Type="OutArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>776,483.20000000000005</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Parse_Excel_selection_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Reflection</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap:VirtualizedContainerService.HintSize="450,276" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="int i = 0;&#xD;&#xA;string input = Selection;&#xD;&#xA;&#xD;&#xA;var currentRange = &quot;&quot;;&#xD;&#xA;var currentSheet = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;// use anon type and clear it because classes cannot be declared&#xD;&#xA;var ranges = new[] { new { sheet = &quot;&quot;, range = &quot;&quot; } }.ToList(); &#xD;&#xA;ranges.Clear();&#xD;&#xA;&#xD;&#xA;Parse();&#xD;&#xA;&#xD;&#xA;// if the user selected multiple ranges, only use the first one&#xD;&#xA;Range = ranges[0].range;&#xD;&#xA;Sheet = ranges[0].sheet;&#xD;&#xA;&#x9;&#xD;&#xA;void Parse()&#xD;&#xA;{&#xD;&#xA;&#x9;while(true) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;ParseRange();&#xD;&#xA;&#x9;&#x9;ranges.Add(new { sheet = currentSheet, range = currentRange });&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if(i &gt;= input.Length) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;Expect(',');&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;void ParseRange() &#xD;&#xA;{&#xD;&#xA;&#x9;ParseSheetName();&#xD;&#xA;&#x9;Expect('!');&#xD;&#xA;&#x9;ParseSheetRange();&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;void ParseSheetName() &#xD;&#xA;{&#xD;&#xA;&#x9;if(input[i] != '\'') &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;ParseSheetNameInner('!');&#xD;&#xA;&#x9;&#x9;return;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;Expect('\'');&#xD;&#xA;&#x9;ParseSheetNameInner('\'');&#xD;&#xA;&#x9;Expect('\'');&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;void ParseSheetNameInner(char exit) &#xD;&#xA;{&#xD;&#xA;&#x9;var j = i;&#xD;&#xA;&#xD;&#xA;&#x9;while(true) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if(input[j] == exit &amp;&amp; input[j+1] != '\'')&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if(input[j] == '\'' &amp;&amp; input[j+1] == '\'') &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;j++;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;j++;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;currentSheet = input.Substring(i, j - i).Replace(&quot;''&quot;, &quot;'&quot;);&#xD;&#xA;&#xD;&#xA;&#x9;i = j;&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;void ParseSheetRange() &#xD;&#xA;{&#xD;&#xA;&#x9;var j = i;&#xD;&#xA;&#xD;&#xA;&#x9;while(true) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if(j &gt;= input.Length || input[j] == ',')&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;j++;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;currentRange = input.Substring(i, j - i);&#xD;&#xA;&#xD;&#xA;&#x9;i = j;&#xD;&#xA;}&#xD;&#xA;&#x9;&#xD;&#xA;void Expect(char c) &#xD;&#xA;{&#xD;&#xA;&#x9;if(input[i++] != c) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;throw new Exception(&quot;The format of the in_selection argument is invalid or not supported.&quot;);&#xD;&#xA;&#x9;}&#xD;&#xA;}" DisplayName="Parse Excel Range" sap:VirtualizedContainerService.HintSize="388,164.8" sap2010:WorkflowViewState.IdRef="InvokeCode_1" Language="CSharp">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="Selection">
          <VisualBasicValue x:TypeArguments="x:String" ExpressionText="selection" />
        </InArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="Sheet">
          <VisualBasicReference x:TypeArguments="x:String" ExpressionText="sheet" />
        </OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="Range">
          <VisualBasicReference x:TypeArguments="x:String" ExpressionText="range" />
        </OutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
  </Sequence>
</Activity>